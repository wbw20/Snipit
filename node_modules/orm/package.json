{
  "author": {
    "name": "Diogo Resende",
    "email": "dresende@thinkdigital.pt"
  },
  "name": "orm",
  "description": "NodeJS Object-relational mapping",
  "version": "2.0.0-alpha7",
  "repository": {
    "url": "http://dresende.github.com/node-orm2"
  },
  "contributors": [
    {
      "name": "Bramus Van Damme",
      "email": "bramus@bram.us"
    },
    {
      "name": "Lorien Gamaroff",
      "email": "lorien@gamaroff.org"
    },
    {
      "name": "preslavrachev"
    }
  ],
  "main": "./lib/ORM",
  "scripts": {
    "test": "make test"
  },
  "engines": {
    "node": "*"
  },
  "devDependencies": {
    "utest": "0.0.6",
    "urun": "0.0.6",
    "mysql": "2.0.0-alpha5",
    "pg": "0.8.7",
    "sqlite3": "2.1.5"
  },
  "optionalDependencies": {},
  "readme": "## Object Relational Mapping\n\n[![Build Status](https://secure.travis-ci.org/dresende/node-orm2.png)](http://travis-ci.org/dresende/node-orm2)\n\n## Install\n\n```sh\nnpm install orm@2.0.0-alpha6\n```\n\nDespite the alpha tag, this is the recommended version for new applications.\n\n## DBMS Support\n\n- MySQL\n- PostgreSQL\n- SQLite\n\n## Introduction\n\nThis is a node.js object relational mapping module.\n\nHere is an example on how to use it:\n\n```js\nvar orm = require('orm');\n\norm.connect(\"mysql://username:password@host/database\", function (err, db) {\n\tif (err) throw err;\n\n\tvar Person = db.define('person', {\n\t\tname      : String,\n\t\tsurname   : String,\n\t\tage       : Number,\n\t\tmale      : Boolean,\n\t\tcontinent : [ 'Europe', 'America', 'Asia', 'Africa', 'Australia', 'Antartica' ], // ENUM type\n\t\tphoto     : Buffer, // BLOB/BINARY\n\t\tdata      : Object // JSON encoded\n\t}, {\n\t\tmethods: {\n\t\t\tfullName: function () {\n\t\t\t\treturn this.name + ' ' + this.surname;\n\t\t\t}\n\t\t},\n\t\tvalidations: {\n\t\t\tage: orm.validators.rangeNumber(18, undefined, 'under-age')\n\t\t}\n\t});\n\n\tPerson.find({ surname: \"Doe\" }, function (err, people) {\n\t\t// SQL: \"SELECT * FROM person WHERE surname = 'Doe'\"\n\n\t\tconsole.log(\"People found: %d\", people.length);\n\t\tconsole.log(\"First person: %s, age %d\", people[0].fullName(), people[0].age);\n\n\t\tpeople[0].age = 16;\n\t\tpeople[0].save(function (err) {\n\t\t\t// err.msg = 'under-age';\n\t\t});\n\t});\n});\n```\n\n## Models\n\nA Model is a structure binded to one or more tables, depending on the associations. The model name is assumed to be the table name. After defining a model you can use it to manipulate the table.\n\nAfter defining a Model you can get a specific element or find one or more based on some conditions.\n\n## Finding Items\n\n### Model.get(id, [ options ], cb)\n\nTo get a specific element from the database use `Model.get`.\n\n```js\nPerson.get(123, function (err, person) {\n\t// finds person with id = 123\n});\n```\n\n### Model.find([ conditions ] [, options ] [, limit ] [, order ] [, cb ])\n\nFinding one or more elements has more options, each one can be given in no specific parameter order. Only `options` has to be after `conditions` (even if it's an empty object).\n\n```js\nPerson.find({ name: \"John\", surname: \"Doe\" }, 3, function (err, people) {\n\t// finds people with name='John' AND surname='Doe' and returns the first 3\n});\n```\n\nIf you need to sort the results because you're limiting or just because you want them sorted do:\n\n```js\nPerson.find({ surname: \"Doe\" }, \"name\", function (err, people) {\n\t// finds people with surname='Doe' and returns sorted by name ascending\n});\nPerson.find({ surname: \"Doe\" }, [ \"name\", \"Z\" ], function (err, people) {\n\t// finds people with surname='Doe' and returns sorted by name descending\n\t// ('Z' means DESC; 'A' means ASC - default)\n});\n```\n\nThere are more options that you can pass to find something. These options are passed in a second object:\n\n```js\nPerson.find({ surname: \"Doe\" }, { offset: 2 }, function (err, people) {\n\t// finds people with surname='Doe', skips the first 2 and returns the others\n});\n```\n\n#### Available options\n\n- `offset`: discards the first `N` elements\n- `limit`: although it can be passed as a direct argument, you can use it here if you prefer\n- `only`: if you don't want all properties, you can give an array with the list of properties you want\n\n#### Chaining\n\nIf you prefer another less complicated syntax you can chain `.find()` by not giving a callback parameter.\n\n```js\nPerson.find({ surname: \"Doe\" }).limit(3).offset(2).only(\"name\", \"surname\").run(function (err, people) {\n    // finds people with surname='Doe', skips first 2 and limits to 3 elements,\n    // returning only 'name' and 'surname' properties\n});\n```\n\n## Associations\n\nAn association is a relation between one or more tables.\n\n## hasOne vs. hasMany Associations\n\nIf you have a relation of 1 to 0 or 1 to 1, you should use `hasOne` association. This assumes a column in the model that has the id of the other end of the relation.\n\n```js\nvar Person = db.define('person', {\n\tname : String\n});\nvar Animal = db.define('animal', {\n\tname : String\n});\nAnimal.hasOne(\"owner\", Person); // assumes column 'owner_id' in 'animal' table\n\n// get animal with id = 123\nAnimal.get(123, function (err, Foo) {\n\t// Foo is the animal model instance, if found\n\tFoo.getOwner(function (err, John) {\n\t\t// if Foo animal has really an owner, John points to it\n\t});\n});\n```\n\nFor relations of 1 to many you have to use `hasMany` associations. This assumes another table that has 2 columns, one for each table in the association.\n\n```js\nvar Person = db.define('person', {\n\tname : String\n});\nPerson.hasMany(\"friends\"); // omitting the other Model, it will assume self model\n\nPerson.get(123, function (err, John) {\n\tJohn.getFriends(function (err, friends) {\n\t\t// assumes table person_friends with columns person_id and friends_id\n\t});\n});\n```\n\nThe `hasMany` associations can have additional properties that are assumed to be in the association table.\n\n```js\nvar Person = db.define('person', {\n\tname : String\n});\nPerson.hasMany(\"friends\", {\n    rate : Number\n});\n\nPerson.get(123, function (err, John) {\n\tJohn.getFriends(function (err, friends) {\n\t\t// assumes rate is another column on table person_friends\n\t\t// you can access it by going to friends[N].extra.rate\n\t});\n});\n```\n\nIf you prefer you can activate `autoFetch`. This way associations are automatically fetched when you get or find instances of a model.\n\n```js\nvar Person = db.define('person', {\n\tname : String\n});\nPerson.hasMany(\"friends\", {\n    rate : Number\n}, {\n    autoFetch : true\n});\n\nPerson.get(123, function (err, John) {\n    // no need to do John.getFriends() , John already has John.friends Array\n});\n```\n\nYou can also define this option globally instead of a per association basis.\n\n```js\nvar Person = db.define('person', {\n\tname : String\n}, {\n    autoFetch : true\n});\nPerson.hasMany(\"friends\", {\n    rate : Number\n});\n```",
  "readmeFilename": "Readme.md",
  "_id": "orm@2.0.0-alpha7",
  "dependencies": {},
  "dist": {
    "shasum": "f5f4481715050543ac501d27c496b256d4bc981d"
  },
  "_from": "orm@2.0.0-alpha7"
}
